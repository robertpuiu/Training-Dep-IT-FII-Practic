// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum PartnerTier {
  DIAMOND
  PLATINUM
  GOLD
  COMMUNITY
  MEDIA
  INDIVIDUAL
}

enum UserRole {
  PARTICIPANT
  VOLUNTEER
  TRAINER
  ADMIN
}

enum InstitutionType {
  SCHOOL
  UNIVERSITY
  OTHER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  ATTENDING
  NOT_ATTENDING
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role UserRole @default(PARTICIPANT)

  partner      Partner?      @relation(fields: [partnerId], references: [id])
  partnerId    String?
  training     Training?     @relation(fields: [trainingId], references: [id])
  trainingId   String?
  applications Application[]
  profile      Profile?

  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Profile {
  id     String @id @default(cuid()) @map("_id")
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  phone   String?
  county  String?
  city    String?
  address String?

  institution      String?
  faculty          String?
  // the following fields are only used when the fields are
  // not in the list of institutions and faculties
  otherInstitution String?
  otherFaculty     String?

  institutionType InstitutionType?
  year            String?
  grade           String?
  hasAgreedGdpr   Boolean          @default(false)
}

model Partner {
  id       String      @id @default(cuid()) @map("_id")
  name     String      @unique
  imageUrl String
  users    User[]
  // Training Training[]
  url      String      @default("https://example.com")
  tier     PartnerTier @default(COMMUNITY)
  Training Training[]
  // emailDomain String? // base on this, we can auto assign partner to user and the trainer role
}

model Training {
  id           String        @id @default(cuid()) @map("_id")
  name         String
  slug         String        @unique
  // a big string of html
  description  String        @db.String
  partner      Partner       @relation(fields: [partnerId], references: [id])
  // form        Form[]
  trainers     User[]
  partnerId    String
  areaId       String
  area         Area          @relation(fields: [areaId], references: [id])
  questions    Question[]
  applications Application[]
  price        Int           @default(0)
}

model Area {
  id       String     @id @default(cuid()) @map("_id")
  name     String     @unique
  imageUrl String
  Training Training[]
}

// model Form {
//   id         String   @id @default(cuid())
//   training   Training @relation(fields: [trainingId], references: [id])
//   trainingId String
//   content    Json
// }

model Question {
  id            String       @id @default(cuid()) @map("_id")
  content       Json
  training      Training?    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId    String?
  // answers    Answer[]
  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
}

// model Answer {
//   id         String    @id @default(cuid())
//   content    Json
//   questionId String?
//   Question   Question? @relation(fields: [questionId], references: [id])
// }

model Application {
  id         String            @id @default(cuid()) @map("_id")
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  training   Training          @relation(fields: [trainingId], references: [id])
  trainingId String
  // status      String
  questions  Question[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  status     ApplicationStatus @default(PENDING)

  isPaid Boolean @default(false)

  attendence Attendance[]
}

model Setting {
  key   String @id @map("_id")
  value String
}

model Attendance {
  id            String      @id @default(cuid()) @map("_id")
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  date          DateTime    @default(now())
  week          Int
}
